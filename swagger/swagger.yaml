swagger: '2.0'
info:
  description: >-
    HelpWanted REST API server implents a Market Place for Self-Employed.    
    Assume all projects can be done remotely/online. You do not need to worry
    about matching by location. The Buyer with the lowest bid automatically wins
    the bid when the deadline is reached. Lowest bid is displayed on the project
    page.  We have 50K registered Buyers.  On average, 100 projects are posted
    every day. On average, each project receives 50 bids. On the homepage, we
    need to show 100 most recent projects. Optionally you can support
    pagination. You are welcome to assume unspecified requirements to make it
    better for the customers.
  version: 1.0.0
  title: Help Wanted API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: val@filin.us
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: helpwanted.filin.us
basePath: /helpwanted
tags:
  - name: market
    description: Browse projects on the market
  - name: seller
    description: Seller's projects
  - name: buyer
    description: Buyer's projects book
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  '/seller/{username}/projects/':
    parameters:
      - name: username
        in: path
        description: The seller's username
        default: me
        required: true
        type: string
    get:
      tags:
        - seller
      summary: Seller's projects
      description: ''
      operationId: getSellerProjects
      responses:
        '200':
          description: TODO
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
    post:
      tags:
        - seller
      summary: Crteates a new project description
      description: ''
      operationId: addSellerProject
      parameters:
        - in: body
          name: body
          description: Project description object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '405':
          description: Invalid input
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
  '/seller/{username}/projects/{projectId}':
    parameters:
      - name: username
        in: path
        description: The seller's username
        required: true
        type: string
      - name: projectId
        in: path
        description: 'A seller''s existing project '
        required: true
        type: string
        format: uuid
    put:
      tags:
        - seller
      summary: Update an existing project description
      description: ''
      operationId: updateSellerProject
      parameters:
        - in: body
          name: body
          description: Project description that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
        '405':
          description: Validation exception
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
    delete:
      tags:
        - seller
      summary: Delete an existing seller's project
      description: Delete an existing seller's project if project hidden or finished without bids
      operationId: deleteSellerProject
      parameters:
        - name: username
          in: path
          description: The seller's username
          required: true
          type: string
        - name: projectId
          in: path
          description: A seller's existing project
          required: true
          type: string
          format: uuid
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
  /market/projects:
    get:
      tags:
        - market
      summary: Finds Projects by criteria
      description: Multiple status values can be provided with comma separated strings
      operationId: findProjectsByStatus
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - active
              - published
              - finished
            default: active
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '400':
          description: Invalid status value
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
  '/market/projects/{projectId}':
    get:
      tags:
        - market
      summary: Find project by ID
      description: Returns a single project
      operationId: getProjectById
      parameters:
        - name: projectId
          in: path
          description: ID of project to return
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProjectDetail'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found on market
      security:
        - api_key: []
  '/seller/{username}/projects/{projectId}/images':
    post:
      tags:
        - seller
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: Seller's username
          required: true
          type: string
        - name: projectId
          in: path
          description: ID of project to update
          required: true
          type: string
          format: uuid
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
  '/seller/{username}/projects/{projectId}/images/{imageId}':
    delete:
      tags:
        - seller
      summary: delete an image
      description: ''
      operationId: deleteProjectImage
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: Seller's username
          required: true
          type: string
        - name: projectId
          in: path
          description: ID of project containg image
          required: true
          type: string
          format: uuid
        - name: imageId
          in: path
          description: image ID
          required: true
          type: string
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - helpwanted_auth:
            - 'write:projects'
            - 'bid:projects'
  '/buyer/{username}/projects':
    get:
      tags:
        - buyer
      summary: 'Buyer''s projects'
      description: 'All those projects buyer''s bid'
      operationId: findBuyersProjects
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The buyer's username
          required: true
          type: string
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - active
              - published
              - finished
            default: active
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '400':
          description: Invalid status value
      security:
        - helpwanted_auth:
            - 'bid:projects'
  '/buyer/{username}/projects/{projectId}':
    parameters:
      - name: username
        in: path
        description: The buyer's username
        required: true
        type: string
      - name: projectId
        in: path
        description: an existing project ID
        required: true
        type: string
        format: uuid
    get:
      tags:
        - buyer
      summary: Get buyers bid status in specified project
      description: 'Buyers may track projects where they bid or just bookmarked'
      operationId: getBuyerProject
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    post:
      tags:
        - buyer
      summary: Bookmark a market project
      description: ''
      operationId: bookmarkBuyerProject
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    put:
      tags:
        - buyer
      summary: Bid on bookmarked project
      description: ''
      operationId: bidBuyerProject
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Bid on project
          required: true
          schema:
            $ref: '#/definitions/BidRequest'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    delete:
      tags:
        - buyer
      summary: Delete not-active project by ID
      description: 'Buyers may delete projects they bid. If projects won, it must be delivered. Delivered projects are moved to archive'
      operationId: deleteBuyerProjectBookmark
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
securityDefinitions:
  helpwanted_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:projects': modify projects in your account
      'bid:projects': bookmark projects and bid
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  BidRequest:
    type: object
    properties:
      project:
        type: string
        format: uuid
        readOnly: true
      bidder:
        type: string
        format: uuid
        readOnly: true
      quantity:
        type: integer
        format: int32
        default: 1
      unit:
        type: string
        description: Order Status
        enum:
          - hour
          - whole
      pricePerUnit:
        type: number
        format: currency
        example: 7.38
  Project:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      title:
        type: string
        example: translate text from English to Spanish
      description:
        type: string
        example: big big description
  ProjectDetail:
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      title:
        type: string
        example: translate text from English to Spanish
      description:
        type: string
        example: big big description
      files:
        type: array
        items:
          type: string
      biddingStatus:
        type: string
        description: Project Bidding Status
        enum:
          - waiting_start
          - waiting_bids
          - bidding
          - pending
          - winner
          - no_winner
      winningPrice:
        type: number
        format: currency
        example: 17.95
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
