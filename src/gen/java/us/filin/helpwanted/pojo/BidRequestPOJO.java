/*
 * Help Wanted API
 * HelpWanted REST API server implents a Market Place for Self-Employed.     Assume all projects can be done remotely/online. You do not need to worry about matching by location. The Buyer with the lowest bid automatically wins the bid when the deadline is reached. Lowest bid is displayed on the project page.  We have 50K registered Buyers.  On average, 100 projects are posted every day. On average, each project receives 50 bids. On the homepage, we need to show 100 most recent projects. Optionally you can support pagination. You are welcome to assume unspecified requirements to make it better for the customers.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: val@filin.us
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package us.filin.helpwanted.pojo;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.UUID;
import javax.validation.constraints.*;

/**
 * BidRequestPOJO
 */

public class BidRequestPOJO   {
  private static final long serialVersionUID = 42L;

  @JsonProperty("project")
  private UUID project = null;

  @JsonProperty("bidder")
  private UUID bidder = null;

  @JsonProperty("quantity")
  private Integer quantity = 1;

  /**
   * Order Status
   */
  public enum UnitEnum {
    HOUR("hour"),
    
    WHOLE("whole");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UnitEnum fromValue(String text) {
      for (UnitEnum b : UnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("unit")
  private UnitEnum unit = null;

  @JsonProperty("pricePerUnit")
  private BigDecimal pricePerUnit = null;

  /**
   * Get project
   * @return project
   **/
  @JsonProperty("project")
  @ApiModelProperty(value = "")
  public UUID getProject() {
    return project;
  }

  /**
   * Get bidder
   * @return bidder
   **/
  @JsonProperty("bidder")
  @ApiModelProperty(value = "")
  public UUID getBidder() {
    return bidder;
  }

  public BidRequestPOJO quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   **/
  @JsonProperty("quantity")
  @ApiModelProperty(value = "")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public BidRequestPOJO unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Order Status
   * @return unit
   **/
  @JsonProperty("unit")
  @ApiModelProperty(value = "Order Status")
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }

  public BidRequestPOJO pricePerUnit(BigDecimal pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
    return this;
  }

  /**
   * Get pricePerUnit
   * @return pricePerUnit
   **/
  @JsonProperty("pricePerUnit")
  @ApiModelProperty(example = "7.38", value = "")
  public BigDecimal getPricePerUnit() {
    return pricePerUnit;
  }

  public void setPricePerUnit(BigDecimal pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BidRequestPOJO bidRequest = (BidRequestPOJO) o;
    return Objects.equals(this.project, bidRequest.project) &&
        Objects.equals(this.bidder, bidRequest.bidder) &&
        Objects.equals(this.quantity, bidRequest.quantity) &&
        Objects.equals(this.unit, bidRequest.unit) &&
        Objects.equals(this.pricePerUnit, bidRequest.pricePerUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(project, bidder, quantity, unit, pricePerUnit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BidRequestPOJO {\n");
    
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    bidder: ").append(toIndentedString(bidder)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

